import { Request, Response } from 'express';
import { firebaseService } from './firebaseService';
import crypto from 'crypto';

/**
 * Controller para criar nova conta de usu√°rio
 * Endpoint: POST /api/accounts
 * 
 * @description Este controller valida os dados recebidos (username e password),
 * verifica duplicatas no Firestore e salva a conta diretamente no banco.
 * 
 * Fluxo:
 * 1. Valida formato dos dados recebidos (username e password)
 * 2. Verifica se username j√° existe no Firestore
 * 3. Gera hash da senha
 * 4. Salva diretamente no Firestore
 * 
 * @param req - Objeto Request do Express
 * @param res - Objeto Response do Express
 * @returns Promise<void>
 */
export const createAccount = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('üîç [CREATE_ACCOUNT] Iniciando cria√ß√£o de conta');
    console.log('üì• [CREATE_ACCOUNT] Body recebido:', JSON.stringify(req.body, null, 2));
    
    const { username, passwrod } = req.body;

    // === VALIDA√á√ÉO DE DADOS ===
    
    // Valida√ß√£o b√°sica dos campos obrigat√≥rios
    if (!username || !passwrod) {
      console.log('‚ùå [CREATE_ACCOUNT] Campos obrigat√≥rios ausentes:', { username: !!username, passwrod: !!passwrod });
      res.status(400).json({
        success: false,
        error: 'Dados incompletos',
        message: 'Username e password s√£o obrigat√≥rios',
        required: ['username', 'passwrod']
      });
      return;
    }
    
    console.log('‚úÖ [CREATE_ACCOUNT] Campos obrigat√≥rios validados');

    // Valida√ß√£o de username (m√≠nimo 3 caracteres, apenas letras, n√∫meros e underscore)
    const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;
    if (!usernameRegex.test(username)) {
      console.log('‚ùå [CREATE_ACCOUNT] Username inv√°lido:', username);
      res.status(400).json({
        success: false,
        error: 'Username inv√°lido',
        message: 'Username deve ter entre 3-20 caracteres (letras, n√∫meros e underscore apenas)'
      });
      return;
    }
    console.log('‚úÖ [CREATE_ACCOUNT] Username v√°lido:', username);

    // Valida√ß√£o de senha (m√≠nimo 6 caracteres)
    if (passwrod.length < 6) {
      console.log('‚ùå [CREATE_ACCOUNT] Senha muito curta:', passwrod.length, 'caracteres');
      res.status(400).json({
        success: false,
        error: 'Senha muito curta',
        message: 'Senha deve ter pelo menos 6 caracteres'
      });
      return;
    }
    console.log('‚úÖ [CREATE_ACCOUNT] Senha v√°lida:', passwrod.length, 'caracteres');

    // === VERIFICA√á√ÉO DE DUPLICATAS NO FIRESTORE ===
    
    console.log('üîç [CREATE_ACCOUNT] Verificando se username j√° existe...');
    const usernameExists = await firebaseService.usernameExists(username);
    if (usernameExists) {
      console.log('‚ùå [CREATE_ACCOUNT] Username j√° existe:', username);
      res.status(409).json({
        success: false,
        error: 'Username j√° existe',
        message: 'Este username j√° est√° em uso'
      });
      return;
    }
    console.log('‚úÖ [CREATE_ACCOUNT] Username dispon√≠vel:', username);

    // === PROCESSAMENTO E SALVAMENTO ===
    
    console.log('üîê [CREATE_ACCOUNT] Gerando hash da senha...');
    const salt = process.env.PASSWORD_SALT || 'openrpg_salt';
    console.log('üßÇ [CREATE_ACCOUNT] Salt usado:', salt ? 'definido' : 'padr√£o');
    
    const hashedPassword = crypto
      .createHash('sha256')
      .update(passwrod + salt)
      .digest('hex');
    
    console.log('‚úÖ [CREATE_ACCOUNT] Hash gerado com sucesso');

    console.log('üíæ [CREATE_ACCOUNT] Salvando conta no Firebase...');
    const accountId = await firebaseService.saveAccount(username, hashedPassword);
    console.log('‚úÖ [CREATE_ACCOUNT] Conta salva com ID:', accountId);

    // Resposta de sucesso
    const responseData = {
      success: true,
      message: 'Conta criada com sucesso!',
      data: {
        accountId,
        username,
        createdAt: new Date().toISOString()
      }
    };
    
    console.log('üì§ [CREATE_ACCOUNT] Enviando resposta de sucesso:', JSON.stringify(responseData, null, 2));
    res.status(201).json(responseData);

  } catch (error) {
    console.error('üí• [CREATE_ACCOUNT] ERRO CR√çTICO:', error);
    console.error('üí• [CREATE_ACCOUNT] Stack trace:', error instanceof Error ? error.stack : 'N/A');
    console.error('üí• [CREATE_ACCOUNT] Tipo do erro:', typeof error);
    console.error('üí• [CREATE_ACCOUNT] Mensagem do erro:', error instanceof Error ? error.message : String(error));
    
    const errorResponse = {
      success: false,
      error: 'Erro interno do servidor',
      message: 'N√£o foi poss√≠vel processar o cadastro',
      debug: {
        errorType: typeof error,
        errorMessage: error instanceof Error ? error.message : String(error),
        timestamp: new Date().toISOString()
      }
    };
    
    console.log('üì§ [CREATE_ACCOUNT] Enviando resposta de erro:', JSON.stringify(errorResponse, null, 2));
    res.status(500).json(errorResponse);
  }
};
