// @ts-ignore - Firebase Admin SDK types are included in the package
import admin from 'firebase-admin';

/**
 * Configura√ß√£o do Firebase Firestore para servidor Node.js
 * 
 * @description Centraliza a configura√ß√£o e inicializa√ß√£o do Firebase Admin SDK
 * usando as vari√°veis de ambiente do projeto. Baseado no guia oficial do Firestore.
 * 
 * @see https://firebase.google.com/docs/firestore/quickstart
 */

class FirestoreConfig {
  private static instance: FirestoreConfig;
  private db: admin.firestore.Firestore | null = null;
  private initialized = false;

  private constructor() {
    this.initializeFirestore();
  }

  /**
   * Singleton pattern para garantir uma √∫nica inst√¢ncia da configura√ß√£o
   * 
   * @returns FirestoreConfig - Inst√¢ncia √∫nica da configura√ß√£o
   */
  public static getInstance(): FirestoreConfig {
    if (!FirestoreConfig.instance) {
      FirestoreConfig.instance = new FirestoreConfig();
    }
    return FirestoreConfig.instance;
  }

  /**
   * Inicializa o Firebase Admin SDK com as configura√ß√µes do ambiente
   * 
   * @description Configura o Firebase usando as vari√°veis de ambiente
   * dispon√≠veis no arquivo .env do projeto.
   */
  private initializeFirestore(): void {
    try {
      console.log('üîß [FIRESTORE_CONFIG] Iniciando inicializa√ß√£o do Firestore');
      
      if (!this.initialized) {
        const firebaseConfig = {
          apiKey: process.env.FIREBASE_API_KEY,
          authDomain: process.env.FIREBASE_AUTH_DOMAIN,
          projectId: process.env.FIREBASE_PROJECT_ID,
          storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
          messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
          appId: process.env.FIREBASE_APP_ID,
          measurementId: process.env.FIREBASE_MEASUREMENT_ID
        };
  
        console.log('üîç [FIRESTORE_CONFIG] Vari√°veis de ambiente carregadas:', {
          projectId: firebaseConfig.projectId ? 'definida' : 'n√£o definida',
          serviceAccountKey: process.env.FIREBASE_SERVICE_ACCOUNT_KEY ? 'definida' : 'n√£o definida'
        });
  
        if (!firebaseConfig.projectId) {
          throw new Error('FIREBASE_PROJECT_ID n√£o est√° definido');
        }
  
        if (!admin.apps.length) {
          console.log('üöÄ [FIRESTORE_CONFIG] Inicializando Firebase Admin SDK...');
          
          const appConfig: any = {
            projectId: firebaseConfig.projectId
          };
  
          // Configura√ß√£o com Service Account Key
          if (process.env.FIREBASE_SERVICE_ACCOUNT_KEY) {
            console.log('üîë [FIRESTORE_CONFIG] Usando Service Account Key');
            try {
              const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY);
              appConfig.credential = admin.credential.cert(serviceAccount);
              console.log('‚úÖ [FIRESTORE_CONFIG] Service Account configurada');
            } catch (parseError) {
              console.error('üí• [FIRESTORE_CONFIG] Erro ao parsear Service Account Key:', parseError);
              throw new Error('FIREBASE_SERVICE_ACCOUNT_KEY inv√°lida');
            }
          } else {
            console.log('‚ö†Ô∏è [FIRESTORE_CONFIG] Service Account Key n√£o encontrada - usando credenciais padr√£o');
          }
  
          admin.initializeApp(appConfig);
          console.log('‚úÖ [FIRESTORE_CONFIG] Firebase Admin SDK inicializado');
        }
  
        this.db = admin.firestore();
        this.initialized = true;
        
        console.log('‚úÖ [FIRESTORE_CONFIG] Firestore inicializado com sucesso');
        console.log(`üìä [FIRESTORE_CONFIG] Projeto: ${firebaseConfig.projectId}`);
      }
    } catch (error) {
      console.error('üí• [FIRESTORE_CONFIG] ERRO ao inicializar Firestore:', error);
      throw new Error(`Falha na inicializa√ß√£o do Firestore: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * Retorna a inst√¢ncia do Firestore Database
   * 
   * @returns admin.firestore.Firestore - Inst√¢ncia do Firestore
   * @throws Error se o Firestore n√£o foi inicializado
   */
  public getDatabase(): admin.firestore.Firestore {
    if (!this.db) {
      throw new Error('Firestore n√£o foi inicializado corretamente');
    }
    return this.db;
  }

  /**
   * Verifica se o Firestore foi inicializado com sucesso
   * 
   * @returns boolean - true se inicializado, false caso contr√°rio
   */
  public isInitialized(): boolean {
    return this.initialized && this.db !== null;
  }

  /**
   * Testa a conex√£o com o Firestore
   * 
   * @returns Promise<boolean> - true se conectado, false caso contr√°rio
   */
  public async testConnection(): Promise<boolean> {
    try {
      if (!this.db) {
        return false;
      }

      // Tenta fazer uma opera√ß√£o simples para testar a conex√£o
      await this.db.collection('_test_connection').limit(1).get();
      console.log('‚úÖ Conex√£o com Firestore verificada');
      return true;
    } catch (error) {
      console.error('‚ùå Erro na conex√£o com Firestore:', error);
      return false;
    }
  }

  /**
   * Obt√©m informa√ß√µes sobre a configura√ß√£o atual
   * 
   * @returns object - Informa√ß√µes da configura√ß√£o (sem dados sens√≠veis)
   */
  public getConfigInfo(): object {
    return {
      projectId: process.env.FIREBASE_PROJECT_ID,
      authDomain: process.env.FIREBASE_AUTH_DOMAIN,
      initialized: this.initialized,
      hasDatabase: this.db !== null
    };
  }
}

// Exporta a inst√¢ncia √∫nica da configura√ß√£o
export const firestoreConfig = FirestoreConfig.getInstance();

// Exporta tamb√©m a classe para casos espec√≠ficos
export { FirestoreConfig };
